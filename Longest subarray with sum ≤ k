Method 1:Using Brute Force
#include<iostream>
#include<vector>
using namespace std;
int main()
{
    int n,k;
    cin>>n>>k;
    vector<int>v(n);
    for(int i=0;i<n;i++)
    {
        cin>>v[i];
    }
    int max_len=0,start_index=-1,end_index=-1;
    for(int i=0;i<n;i++)
    {
        int sum=0;
        for(int j=i;j<n;j++)
        {
            sum+=v[j];
            if(sum<=k)
            {
                if(j-i+1>=max_len)
                {
                    max_len=j-i+1;
                    start_index=i;
                    end_index=j;
                }
            }
            else if(sum>k)
            {
                break;
            }
        }
    }
    if(start_index!=-1)
    {
        for(int i=start_index;i<=end_index;i++)
        {
            cout<<v[i]<<" ";
        }
        cout<<endl;
    }
    cout<<max_len<<endl;
    return 0;
}

Method 2:Using Sliding Window
#include<iostream>
#include<vector>
using namespace std;
int main()
{
    int n,k;
    cin>>n>>k;
    vector<int>v(n);
    for(int i=0;i<n;i++)
    {
        cin>>v[i];
    }
    int left=0,right=0,max_len=0,sum=0;
    int start_index=-1,end_index=-1;
    while(right<n)
    {
        sum+=v[right];
        while(sum>k)
        {
            sum-=v[left];
            left++;
        }
        if(sum<=k && right-left+1>=max_len)
        {
            max_len=right-left+1;
            start_index=left;
            end_index=right;
        }
        right++;
    }
    if(start_index!=-1)
    {
        for(int i=start_index;i<=end_index;i++)
        {
            cout<<v[i]<<" ";
        }
        cout<<endl;
    }
    cout<<max_len<<endl;
    return 0;
}

Input:
5 14  
2 5 1 7 10

Output:
5 1 7 
3
